
Date: 05/13/2020
Author: Jinxin Xia


859. Buddy Strings

class Solution:
    def buddyStrings(self, A: str, B: str) -> bool:
        
        # check the constraints and assumption
        if len(A) > 20000 or len(B) > 20000:
            return "string length exceed limits"
        
        if len(A) != len(B):
            return False
        list_a = list(A)
        list_b = list(B)
        
        uniq_a = []
        uniq_b = []
        
        for i in range(len(list_a)):
            if list_a[i] != list_b[i]:
                uniq_a.append(list_a[i])
                uniq_b.append(list_b[i])
                #check assumption uppercase
                if list_a[i].isupper() or list_b[i].isupper() :
                    return "A and B consist only of lowercase letters"
                if len(uniq_a) > 2:
                    return False
        
        if len(uniq_a) == 2 and uniq_a[::-1] == uniq_b:
            return True
        if len(uniq_a) == 0:
            if len(list_a) > len(set(list_a)):
                return True
        return False



155. Min Stack

class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.A = [float('inf')]
        self.min = [float('inf')]

    def push(self, x: int) -> None:
        self.A.append(x)
        self.min.append(min(x,self.min[-1]))

    def pop(self) -> None:
        self.A.pop()
        self.min.pop()

    def top(self) -> int:
        return self.A[-1]

    def getMin(self) -> int:
        return self.min[-1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()



206. Reverse Linked List


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        listn_a = ListNode(float("-inf"))
        while head:
            listn_a.next, head.next, head = head,listn_a.next, head.next
        return listn_a.next


687. Longest Univalue Path

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        if not root: return 0
        left = self.path(root.left,root.val)
        right = self.path(root.right,root.val)
        return max(left+right,self.longestUnivaluePath(root.left),self.longestUnivaluePath(root.right))
    
    def path(self,root,val):
        if not root or root.val != val:
            return 0
        return max(self.path(root.left,val),self.path(root.right,val)) + 1
        


367. Valid Perfect Square

class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        if num < 2: 
            return True
        
        min_val = 0 
        max_val = int((num/2))
        
        while max_val >= min_val:
            mid_val = int((min_val+max_val)/2)
            mid_val_sqr = mid_val**2
            
            if mid_val_sqr == num:
                return True
            elif mid_val_sqr < num:
                min_val = mid_val + 1
            elif mid_val_sqr > num:
                max_val = mid_val -1
        return False








Date: 05/14/2020
Author: Jinxin Xia


349. Intersection of Two Arrays


class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        
        uniq_1 = set(nums1)
        uniq_2 = set(nums2)
        
        return list(uniq_1 & uniq_2)







695. Max Area of Island

#################
#################


class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        self.tmp=0
        self.top=0
        m=len(grid)
        n=len(grid[0])
        def dfs(i,j):
            if 0<=i<m and 0<=j<n and grid[i][j]==1 :
                grid[i][j]=0
                self.tmp+=1
                dfs(i-1,j)
                dfs(i+1,j)
                dfs(i,j-1)
                dfs(i,j+1)
        
        for i in range(m):
            for j in range(n):
                if grid[i][j]==1:
                    self.tmp=0
                    dfs(i,j)
                    if self.tmp>self.top:
                        self.top=self.tmp
        return self.top




746. Min Cost Climbing Stairs

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        f0, f1 = cost[0], cost[1]
        for i in range(2,len(cost)):
            tmp = cost[i] + min(f0, f1)
            f0 = f1
            f1 = tmp
        return min(f0, f1)




1177. Can Make Palindrome from Substring

without rearrange
class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        
        size = len(queries)
        answer = []
        
        for i in range(size):
            
            left = queries[i][0]
            right = queries[i][1]
            k = queries[i][2]
            
            target = s[left:right+1]
            target_size = len(target)
                        
            count = 0

            for j in range(int(target_size/2)):
                if target[j] != target[target_size -1 - j]:
                    count = count + 1
            
            if count > k:
                answer.append(False)
            else:
                answer.append(True)
                
            
        return answer






with rearrange
from collections import Counter
class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        
        size = len(queries)
        answer = []
        
        for i in range(size):
            
            left = queries[i][0]
            right = queries[i][1]
            k = queries[i][2]
            
            target = s[left:right+1]
            
            num_uniq = list(Counter(target).values())
            
            count = 0

            for j in range(len(num_uniq)):
                if num_uniq[j] % 2 != 0 :
                    count = count + 1
            
            if int(count/2) > k:
                answer.append(False)
            else:
                answer.append(True)
                
            
        return answer


468. Validate IP Address

class Solution:
    def validate_ipv4(self,IP:str)->str:
        for x in IP.split("."):
            if len(x)==0 or len(x)>3: return "Neither"
            if not x.isdigit() or not 0<=int(x)<=255 or (x[0]=="0" and len(x)!=1): return "Neither"
        return "IPv4"
    
    def validate_ipv6(self,IP:str)->str:
        hex_digits="0123456789abcdefABCDEF"
        for x in IP.split(":"):
            if len(x)==0 or len(x)>4 or not all(c in hex_digits for c in x): return "Neither"
        return "IPv6" 
        
    def validIPAddress(self, IP: str) -> str:
        """
        O(n) time complexity
        O(1) space complexity
        """
        if "." in IP and IP.count(".")==3:
            return self.validate_ipv4(IP)
        elif ":" in IP and IP.count(":")==7:
            return self.validate_ipv6(IP)
        else:
            return "Neither"



819. Most Common Word

Input: 
paragraph = "Bob hit a ball, the hit BALL flew far after it was hit."
banned = ["hit"]
Output: "ball"
Explanation: 
"hit" occurs 3 times, but it is a banned word.
"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as "ball,"), 
and that "hit" isn't the answer even though it occurs more because it is banned.


import string
class Solution:
    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:       
        banned = set(banned)
        for c in string.punctuation:
            paragraph = paragraph.replace(c, " ")
            
        words = paragraph.lower().split()
        count = {}
        for word in words:
            count[word] = count.get(word, 0) + 1
        res = sorted(count.items(), key=lambda x: x[1], reverse = True)
        for i in range(len(res)):
            if res[i][0] not in banned:
                return res[i][0]





Date: 05/15/2020
Author: Jinxin Xia


###################################################################################################################
763. Partition Labels

class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        first={}
        last={}
        for i in S:
            if i not in first:
                first[i] = S.find(i)
            if i not in last:
                last[i] = S.rfind(i)
        start=S[0]
        cnt=0
        result=[]
        for letter in S:
            if last[letter]<=last[start]:
                cnt+=1
            else:
                if first[letter]<last[start]:
                    start=letter
                    cnt+=1
                else:
                    start=letter
                    result.append(cnt)
                    cnt=1
        result.append(cnt)    
        return result



Date: 06/06/2020
Author: Jinxin Xia


###################################################################################################################
1351. Count Negative Numbers in a Sorted Matrix

A matrix is stored in a list list, and we want to find out the number of elements that are smaller than 
zero.

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        neg_num = 0
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] < 0:
                    neg_num += n-j 
                    break
                    
        
        return neg_num



###################################################################################################################
849. Maximize Distance to Closest Person

Input: [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (seats[2]), then the closest person has distance 2.
If Alex sits in any other open seat, the closest person has distance 1.
Thus, the maximum distance to the closest person is 2.


class Solution:
    def maxDistToClosest(self, seats: List[int]) -> int:
        # max seat distance 
        max_dis = 0
        # local empyt seats number
        emp_seat = 0
        # index show how many times did emp_seat reset, use it to handle first 0 and last 0s situation
        index = 0
   
        for i in range(len(seats)):
            if seats[i] == 1:
                
                # check if seats[0] == 0 
                if index == 0:
                    max_dis = emp_seat
                    index += 1
                    emp_seat = 0
                else:
                    max_dis = max(max_dis,(emp_seat//2 + emp_seat%2))
                    emp_seat = 0
            else:
                emp_seat += 1 

                
        
        if emp_seat >= max_dis:
            return emp_seat
        else:
            return round(max_dis)






